{% if api_config or external_apis -%}
import os
import httpx
{% endif -%}
import logging
from typing import Dict, Any
from a2a.types import Task

from ..handlers import register_handler
{% if api_config or external_apis %}
from ..services import get_services
from ..messages import MessageProcessor, ConversationContext
from ..function_dispatcher import ai_function
{% endif -%}
{% if middleware_imports %}
from ..middleware import {{ middleware_imports|join(', ') }}
{% endif -%}
{% if stateful %}
from ..state import StateManager
{% endif %}

logger = logging.getLogger(__name__)


@register_handler("{{ skill_id }}")
{% if api_config or external_apis -%}
@ai_function(
    description="{{ description }}",
    parameters={
        "user_input": {"type": "string", "description": "The user's request or query"}
    }
)
{% endif -%}
{% for decorator in middleware_decorators -%}
{{ decorator }}
{% endfor -%}
async def handle_{{ skill_id }}(task: Task) -> {% if api_config or external_apis %}str{% else %}Dict[str, Any]{% endif %}:
    """{{ description }}"""
{% if api_config -%}
    # TODO: Get API configuration
    # api_key = os.getenv("{{ api_config.env_var }}")
    
{% endif -%}
{% if api_config or external_apis -%}
    # Extract user message using A2A-compliant message processing
    messages = MessageProcessor.extract_messages(task)
    latest_message = MessageProcessor.get_latest_user_message(messages)
    
    if not latest_message:
        return "Please provide input for {{ name }}."
    
    content = latest_message.get("content", "") if isinstance(latest_message, dict) else getattr(latest_message, "content", "")
    
    # Update conversation context
    ConversationContext.increment_message_count(task.id)
    
{% if api_config -%}
    # Get services for external API integration
    services = get_services()
    
    # TODO: Implement your API integration here
    # api_key = os.getenv("{{ api_config.env_var }}")
    # Example: api_data = await fetch_api_data(content)
    
{% endif -%}
    # TODO: Implement your skill logic here
    # Process the user input: {content}
    
    return f"Processed request for {{ name }}: {content}"
{% else -%}
{% if input_mode == 'multimodal' -%}
    # Extract multimodal input
    input_data = task.input
    # TODO: Process images/files if present
    
{% else -%}
    # Extract input
    input_data = task.input
    
{% endif -%}
    # TODO: Implement your skill logic here
    result = {
        "status": "success",
        "skill": "{{ skill_id }}",
        "message": "Skill not implemented yet",
        "input": input_data
    }
    
    return result
{% endif %}