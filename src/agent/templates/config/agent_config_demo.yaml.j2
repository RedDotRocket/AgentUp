# AgentUp Agent Configuration - Demo Template
# Example agent showcasing various capabilities with pre-built skills

# Agent Information
agent:
  name: {{ project_name }}
  description: {{ description }}
  version: 0.1.0

# Core skills configuration - Demo skills showcase mixed routing
skills:
  - skill_id: file_assistant
    name: File Assistant
    description: Read and write files using MCP
    tags: [file, mcp, assistant]
    # No keywords or patterns defined, only available via AI routing
    input_mode: text
    output_mode: text
    priority: 90
  - skill_id: weather_bot
    name: Weather Bot
    description: Get weather information using function calling
    tags: [weather, forecast, external]
    # No keywords or patterns defined, only available via AI routing
    input_mode: text
    output_mode: text
    priority: 80
  - skill_id: code_analyzer
    name: Code Analyzer
    description: Analyze code repositories
    tags: [code, analysis, repository]
    # No keywords or patterns defined, only available via AI routing
    input_mode: text
    output_mode: text
    priority: 85
  - skill_id: joke_teller
    name: Joke Teller
    description: Tell jokes on demand
    tags: [joke, humor, entertainment]
    input_mode: text
    output_mode: text
    keywords: [joke, funny, humor, laugh]
    patterns: ['joke.*', 'tell.*joke.*', 'funny.*', 'laugh.*']
    priority: 20
  - skill_id: hello_world
    name: Hello World
    description: Simple greeting handler
    tags: [greeting, basic, direct]
    input_mode: text
    output_mode: text
    keywords: [hello, hi, hey, greetings]
    patterns: ['hello.*', 'hi\\s+.*', 'greet.*']
    priority: 10
  - skill_id: system_status
    name: System Status
    description: Check system health and status
    tags: [system, status, health]
    input_mode: text
    output_mode: text
    keywords: [status, health, system, ping]
    patterns: ['system.*status', 'health.*check', 'ping']
    priority: 30

# Registry skills section - for skills installed from AgentUp Skills Registry
registry_skills: []

# Security configuration
security:
  enabled: true   # Authentication enabled for demo template
  type: api_key   # Options: 'api_key', 'bearer', 'oauth2'
  api_key:
    header_name: X-API-Key
    location: header  # Options: 'header', 'query', 'cookie'
    keys:
      # Generated API keys - replace with your own
      - "{{ generate_api_key() }}"

# AI configuration
{% if ai_provider_config %}
ai_provider:
    provider: {{ ai_provider_config.provider }}
{% if ai_provider_config.provider == 'openai' %}
    api_key: ${OPENAI_API_KEY}
    model: {{ ai_provider_config.model | default('gpt-4o-mini') }}
{% elif ai_provider_config.provider == 'anthropic' %}
    api_key: ${ANTHROPIC_API_KEY}
    model: {{ ai_provider_config.model | default('claude-3-5-sonnet-20241022') }}
{% elif ai_provider_config.provider == 'ollama' %}
    model: {{ ai_provider_config.model | default('llama3') }}
    base_url: ${OLLAMA_BASE_URL:http://localhost:11434/v1}
{% endif %}
    temperature: 0.7
    max_tokens: 1000
    top_p: 1.0
{% endif %}

# External services configuration (LLM configuration moved to ai_provider section)
services:
  valkey:
    type: cache
    config:
      url: '${VALKEY_URL:valkey://localhost:6379}'
      db: 1                    # Use DB 1 for cache
      max_connections: 10

# Model Context Protocol configuration - Demo setup
mcp:
  enabled: true
  client:
    enabled: true
    servers:
      - name: demo-filesystem
        command: npx
        args: ['-y', '@modelcontextprotocol/server-filesystem', './demo-files']
        env: {}
  server:
    enabled: true
    name: {{ project_name }}-mcp-server
    expose_handlers: true
    expose_resources: [agent_status, agent_capabilities]
    port: 8001

# Middleware configuration
middleware:
  - name: logged
    params:
      log_level: 20  # INFO level
  - name: timed
    params: {}
{% if has_middleware and 'cache' in feature_config.get('middleware', []) %}
  - name: cached
    params:
      ttl: 300  # 5 minutes
{% endif %}
{% if has_middleware and 'rate_limit' in feature_config.get('middleware', []) %}
  - name: rate_limited
    params:
      requests_per_minute: 60
{% endif %}
{% if has_middleware and 'retry' in feature_config.get('middleware', []) %}
  - name: retryable
    params:
      max_retries: 3
      backoff_factor: 2
{% endif %}

# Push notifications configuration
push_notifications:
  enabled: true
  backend: valkey              # Valkey backend for demo features
  key_prefix: "demo:push:"    # Demo-specific key prefix
  validate_urls: true         # Enable webhook URL validation
  timeout: 15                 # Shorter timeout for demo

# Cache management
cache:
  backend: valkey
  default_ttl: 900            # 15 minutes for demo
  key_prefix: "demo:cache:"
  enabled: true

# State management
state:
  backend: valkey
  url: '${VALKEY_URL:valkey://localhost:6379}'
  key_prefix: "demo:state:"
  ttl: 3600  # 1 hour